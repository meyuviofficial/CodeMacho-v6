{"version":3,"file":"component---src-pages-blog-mdx-frontmatter-slug-js-content-file-path-users-yuvaraj-selvarajan-documents-y-code-code-macho-blogs-code-macho-v-6-code-macho-blog-1-index-md-e76a9587022b55debc1d.js","mappings":"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","sources":["webpack://code-macho-v6/./node_modules/@mdx-js/react/lib/index.js","webpack://code-macho-v6/./blog/1/index.md","webpack://code-macho-v6/./src/pages/blog/{mdx.frontmatter__slug}.js"],"sourcesContent":["/**\n * @typedef {import('react').ReactNode} ReactNode\n * @typedef {import('mdx/types.js').MDXComponents} Components\n *\n * @typedef Props\n *   Configuration.\n * @property {Components | MergeComponents | null | undefined} [components]\n *   Mapping of names for JSX components to React components.\n * @property {boolean | null | undefined} [disableParentContext=false]\n *   Turn off outer component context.\n * @property {ReactNode | null | undefined} [children]\n *   Children.\n *\n * @callback MergeComponents\n *   Custom merge function.\n * @param {Components} currentComponents\n *   Current components from the context.\n * @returns {Components}\n *   Merged components.\n */\n\nimport React from 'react'\n\n/**\n * @type {import('react').Context<Components>}\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components and\n *   `MDXProvider` to set context based components instead.\n */\nexport const MDXContext = React.createContext({})\n\n/**\n * @param {import('react').ComponentType<any>} Component\n * @deprecated\n *   This export is marked as a legacy feature.\n *   That means it’s no longer recommended for use as it might be removed\n *   in a future major release.\n *\n *   Please use `useMDXComponents` to get context based components instead.\n */\nexport function withMDXComponents(Component) {\n  return boundMDXComponent\n\n  /**\n   * @param {Record<string, unknown> & {components?: Components | null | undefined}} props\n   * @returns {JSX.Element}\n   */\n  function boundMDXComponent(props) {\n    const allComponents = useMDXComponents(props.components)\n    return React.createElement(Component, {...props, allComponents})\n  }\n}\n\n/**\n * Get current components from the MDX Context.\n *\n * @param {Components | MergeComponents | null | undefined} [components]\n *   Additional components to use or a function that takes the current\n *   components and filters/merges/changes them.\n * @returns {Components}\n *   Current components.\n */\nexport function useMDXComponents(components) {\n  const contextComponents = React.useContext(MDXContext)\n\n  // Memoize to avoid unnecessary top-level context changes\n  return React.useMemo(() => {\n    // Custom merge via a function prop\n    if (typeof components === 'function') {\n      return components(contextComponents)\n    }\n\n    return {...contextComponents, ...components}\n  }, [contextComponents, components])\n}\n\n/** @type {Components} */\nconst emptyObject = {}\n\n/**\n * Provider for MDX context\n *\n * @param {Props} props\n * @returns {JSX.Element}\n */\nexport function MDXProvider({components, children, disableParentContext}) {\n  /** @type {Components} */\n  let allComponents\n\n  if (disableParentContext) {\n    allComponents =\n      typeof components === 'function'\n        ? components({})\n        : components || emptyObject\n  } else {\n    allComponents = useMDXComponents(components)\n  }\n\n  return React.createElement(\n    MDXContext.Provider,\n    {value: allComponents},\n    children\n  )\n}\n","/*@jsxRuntime classic @jsx React.createElement @jsxFrag React.Fragment*/\nimport {useMDXComponents as _provideComponents} from \"@mdx-js/react\";\nimport React from \"react\";\nfunction _createMdxContent(props) {\n  const _components = Object.assign({\n    h1: \"h1\",\n    blockquote: \"blockquote\",\n    p: \"p\",\n    h2: \"h2\",\n    ol: \"ol\",\n    li: \"li\",\n    a: \"a\",\n    pre: \"pre\",\n    code: \"code\"\n  }, _provideComponents(), props.components);\n  return React.createElement(React.Fragment, null, React.createElement(_components.h1, null, \"Introduction\"), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Are you tired of juggling of between multiple clusters in your local\\nmachine?\", \" \"), \"\\n\", React.createElement(_components.p, null, \"Then, it is time to automate your local setup and it's configuration. If you're\\nworking as a\\n\\\"cluster-admin\\\"\\nfor anyone of the enterprises, then this blog might be able to help you.\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"Prerequisites\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Bash Scripting\"), \"\\n\", React.createElement(_components.li, null, React.createElement(_components.a, {\n    href: \"https://gist.github.com/olih/f7437fb6962fb3ee9fe95bda8d2c8fa4\"\n  }, \"JQ\")), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"Pros\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"Multiple clusters can configured locally in an automated way\"), \"\\n\", React.createElement(_components.li, null, \"If your local configuration is messed up (Which I do often :P), it is easy to fix it.\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"Manual Way?\"), \"\\n\", React.createElement(_components.p, null, \"To setup a cluster locally, the cluster context needs to be added in your machine.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sh\"\n  }, \"az aks get-credentials -n \\\"${name}\\\" -g \\\"${resource_group}\\\" # Setting the Kube Context\\n\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"Running the above cmd for every cluster can be cumbersome. Let's automate it!!\"), \"\\n\"), \"\\n\", React.createElement(_components.h2, null, \"CODE\"), \"\\n\", React.createElement(_components.p, null, \"Let's jump into the solution right away.\"), \"\\n\", React.createElement(_components.ol, null, \"\\n\", React.createElement(_components.li, null, \"First, try to create a json file that acts as the input for our script.\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-json\"\n  }, \"{\\n  \\\"<Subscription-ID>\\\": {\\n    \\\"region\\\": \\\"<region>\\\",\\n    \\\"name\\\": \\\"<cluster  name>\\\",\\n    \\\"resource_group\\\": \\\"<Resource Group Name>\\\"\\n  },\\n  \\\"<Subscription-ID>\\\": {\\n    \\\"region\\\": \\\"<region>\\\",\\n    \\\"name\\\": \\\"<cluster  name>\\\",\\n    \\\"resource_group\\\": \\\"<Resource Group Name>\\\"\\n  },\\n  \\\"<Subscription-ID>\\\": {\\n    \\\"region\\\": \\\"<region>\\\",\\n    \\\"name\\\": \\\"<cluster  name>\\\",\\n    \\\"resource_group\\\": \\\"<Resource Group Name>\\\"\\n  },\\n  \\\"<Subscription-ID>\\\": {\\n    \\\"region\\\": \\\"<region>\\\",\\n    \\\"name\\\": \\\"<cluster  name>\\\",\\n    \\\"resource_group\\\": \\\"<Resource Group Name>\\\"\\n  },\\n  \\\"<Subscription-ID>\\\": {\\n    \\\"region\\\": \\\"<region>\\\",\\n    \\\"name\\\": \\\"<cluster  name>\\\",\\n    \\\"resource_group\\\": \\\"<Resource Group Name>\\\"\\n  },\\n  \\\"<Subscription-ID>\\\": {\\n    \\\"region\\\": \\\"<region>\\\",\\n    \\\"name\\\": \\\"<cluster  name>\\\",\\n    \\\"resource_group\\\": \\\"<Resource Group Name>\\\"\\n  },\\n  \\\"<Subscription-ID>\\\": {\\n    \\\"region\\\": \\\"<region>\\\",\\n    \\\"name\\\": \\\"<cluster  name>\\\",\\n    \\\"resource_group\\\": \\\"<Resource Group Name>\\\"\\n  }\\n}\\n\")), \"\\n\", React.createElement(_components.ol, {\n    start: \"2\"\n  }, \"\\n\", React.createElement(_components.li, null, \"Read the data from the input JSON file created at the previous step using the JQ cmd and fetch the list of subscription IDs.\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sh\"\n  }, \"# Getting the list of subscriptoin IDs\\nsubscription_ids=$(echo \\\"${data}\\\" | jq -r 'keys | .[]')\\n\")), \"\\n\", React.createElement(_components.ol, {\n    start: \"3\"\n  }, \"\\n\", React.createElement(_components.li, null, \"Let's loop the list of subscription IDs and update the kube context for every cluster\"), \"\\n\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sh\"\n  }, \"echo \\\"${subscription_ids}\\\" | while read -r subscription_id; do\\n    echo \\\"Setting the AZ Context for the Current Sub ID: ${subscription_id}\\\"\\n    az account set -s \\\"${subscription_id}\\\" # Setting the Az Context\\n\\n    name=$(echo ${data} | jq -re '.'\\\\\\\"$subscription_id\\\\\\\"'.'name'') # Fetching the Name of the Cluster\\n    resource_group=$(echo ${data} | jq -re '.'\\\\\\\"$subscription_id\\\\\\\"'.'resource_group'') # Fetching the name of the resource group\\n    echo \\\"Getting the aks credentials for the cluster : ${name} in the rg: ${resource_group}\\\"\\n    az aks get-credentials -n \\\"${name}\\\" -g \\\"${resource_group}\\\" # Setting the Kube Context\\ndone\\n\")), \"\\n\", React.createElement(_components.p, null, \"The whole code looks like something below.\"), \"\\n\", React.createElement(_components.pre, null, React.createElement(_components.code, {\n    className: \"language-sh\"\n  }, \"#!/bin/bash\\n\\n# Getting the Cluster Info from the local Json\\ndata=$(cat <\\\"./data/cluster_info.json\\\" | jq -r)\\n\\n# Getting the list of subscriptoin IDs\\nsubscription_ids=$(echo \\\"${data}\\\" | jq -r 'keys | .[]')\\necho \\\"${subscription_ids}\\\" | while read -r subscription_id; do\\n    echo \\\"Setting the AZ Context for the Current Sub ID: ${subscription_id}\\\"\\n    az account set -s \\\"${subscription_id}\\\" # Setting the Az Context\\n\\n    name=$(echo ${data} | jq -re '.'\\\\\\\"$subscription_id\\\\\\\"'.'name'') # Fetching the Name of the Cluster\\n    resource_group=$(echo ${data} | jq -re '.'\\\\\\\"$subscription_id\\\\\\\"'.'resource_group'') # Fetching the name of the resource group\\n    echo \\\"Getting the aks credentials for the cluster : ${name} in the rg: ${resource_group}\\\"\\n    az aks get-credentials -n \\\"${name}\\\" -g \\\"${resource_group}\\\" # Setting the Kube Context\\ndone\\n\\n\")), \"\\n\", React.createElement(_components.blockquote, null, \"\\n\", React.createElement(_components.p, null, \"NOTE: The above solution is applicable only for AKS Clusters.\"), \"\\n\"));\n}\nfunction MDXContent(props = {}) {\n  const {wrapper: MDXLayout} = Object.assign({}, _provideComponents(), props.components);\n  return MDXLayout ? React.createElement(MDXLayout, props, React.createElement(_createMdxContent, props)) : _createMdxContent(props);\n}\nexport default MDXContent;\n","import GATSBY_COMPILED_MDX from \"/Users/yuvaraj.selvarajan/Documents/YCode/CodeMachoBlogs/CodeMacho_v6/CodeMacho/blog/1/index.md\";\nimport * as React from \"react\";\nimport Seo from \"../../components/seo\";\nimport Layout from \"../../components/layout\";\nimport {graphql} from \"gatsby\";\nimport {GatsbyImage, getImage} from \"gatsby-plugin-image\";\nconst BlogPost = ({data, children}) => {\n  const image = getImage(data.mdx.frontmatter.hero_image);\n  return React.createElement(Layout, null, React.createElement(\"div\", {\n    className: \"flex items-center justify-center min-h-screen min-w-screen md:w-full px-2 md:px-8\"\n  }, React.createElement(\"div\", {\n    className: \"shrink-0 justify-center drop-shadow-2xl p-8 mt-12 mx-24 w-full md:w-max border-2 border-red-600 bg-gradient-to-br from-gray-100 to-gray-300 rounded-xl prose-headings:text-red-600\"\n  }, React.createElement(\"article\", {\n    className: \"prose lg:prose-l prose-img:rounded-xl prose-a:text-blue-600\"\n  }, React.createElement(\"h1\", {\n    className: \"mb-4 pt-4 text-4xl font-extrabold leading-none tracking-tight text-gray-900 md:text-5xl lg:text-6xl dark:text-white\"\n  }, data.mdx.frontmatter.title), React.createElement(\"p\", {\n    className: \"font-bold text-red-600\"\n  }, data.mdx.frontmatter.date), React.createElement(GatsbyImage, {\n    image: image,\n    alt: data.mdx.frontmatter.hero_image_alt\n  }), React.createElement(React.Fragment, null, children)))));\n};\nexport const query = graphql`\n  query ($id: String) {\n    mdx(id: { eq: $id }) {\n      frontmatter {\n        title\n        date(formatString: \"MMMM D, YYYY\")\n        hero_image_alt\n        hero_image_credit_link\n        hero_image_credit_text\n        hero_image {\n          childImageSharp {\n            gatsbyImageData\n          }\n        }\n      }\n    }\n  }\n`;\nexport const Head = ({data}) => React.createElement(Seo, {\n  title: data.mdx.frontmatter.title\n});\nBlogPost\nexport default function GatsbyMDXWrapper(props) {\n  return React.createElement(BlogPost, props, React.createElement(GATSBY_COMPILED_MDX, props));\n}\n"],"names":["MDXContext","useMDXComponents","components","contextComponents","_createMdxContent","props","_components","Object","assign","h1","blockquote","p","h2","ol","li","a","pre","code","_provideComponents","React","href","className","start","wrapper","MDXLayout","BlogPost","_ref","data","children","image","getImage","mdx","frontmatter","hero_image","Layout","title","date","GatsbyImage","alt","hero_image_alt","Head","_ref2","Seo","GatsbyMDXWrapper","GATSBY_COMPILED_MDX"],"sourceRoot":""}