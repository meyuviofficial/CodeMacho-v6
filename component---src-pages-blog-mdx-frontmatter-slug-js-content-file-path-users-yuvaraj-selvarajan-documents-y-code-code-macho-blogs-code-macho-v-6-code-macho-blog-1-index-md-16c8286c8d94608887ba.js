"use strict";(self.webpackChunkcode_macho_v6=self.webpackChunkcode_macho_v6||[]).push([[811],{4223:function(e,t,n){n.r(t),n.d(t,{Head:function(){return h},default:function(){return d}});var r=n(7294);const o=r.createContext({});function l(e){const t=r.useContext(o);return r.useMemo((()=>"function"==typeof e?e(t):{...t,...e}),[t,e])}function a(e){const t=Object.assign({h1:"h1",blockquote:"blockquote",p:"p",h2:"h2",ul:"ul",li:"li",a:"a",pre:"pre",code:"code",ol:"ol"},l(),e.components);return r.createElement(r.Fragment,null,r.createElement(t.h1,null,"Introduction"),"\n",r.createElement(t.blockquote,null,"\n",r.createElement("bold",{className:"font-bold text-red-600"},r.createElement(t.p,null,"Are you tired of juggling of between multiple clusters in your local\nmachine?"," ")),"\n",r.createElement(t.p,null,"Then, it is time to automate your local setup and it's configuration. If you're\nworking as a ",r.createElement("bold",{className:"font-extrabold text-red-600"},'\n"cluster-admin"\n')," for anyone of the enterprises, then this blog might be able to help you."),"\n"),"\n",r.createElement(t.h2,null,"Prerequisites"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,"Bash Scripting"),"\n",r.createElement(t.li,null,r.createElement(t.a,{href:"https://gist.github.com/olih/f7437fb6962fb3ee9fe95bda8d2c8fa4"},"JQ")),"\n"),"\n",r.createElement(t.h2,null,"Pros"),"\n",r.createElement(t.ul,null,"\n",r.createElement(t.li,null,"Multiple clusters can configured locally in an automated way"),"\n",r.createElement(t.li,null,"If your local configuration is messed up (Which I do often :P), it is easy to fix it."),"\n"),"\n",r.createElement(t.h2,null,"Manual Way?"),"\n",r.createElement(t.p,null,"To setup a cluster locally, the cluster context needs to be added in your machine."),"\n",r.createElement(t.pre,null,r.createElement(t.code,{className:"language-sh"},'az aks get-credentials -n "${name}" -g "${resource_group}" # Setting the Kube Context\n')),"\n",r.createElement(t.blockquote,null,"\n",r.createElement(t.p,null,"Running the above cmd for every cluster can be cumbersome. Let's automate it!!"),"\n"),"\n",r.createElement(t.h2,null,"CODE"),"\n",r.createElement(t.p,null,"Let's jump into the solution right away."),"\n",r.createElement(t.ol,null,"\n",r.createElement(t.li,null,"First, try to create a json file that acts as the input for our script."),"\n"),"\n",r.createElement(t.pre,null,r.createElement(t.code,{className:"language-json"},'{\n  "<Subscription-ID>": {\n    "region": "<region>",\n    "name": "<cluster  name>",\n    "resource_group": "<Resource Group Name>"\n  },\n  "<Subscription-ID>": {\n    "region": "<region>",\n    "name": "<cluster  name>",\n    "resource_group": "<Resource Group Name>"\n  },\n  "<Subscription-ID>": {\n    "region": "<region>",\n    "name": "<cluster  name>",\n    "resource_group": "<Resource Group Name>"\n  },\n  "<Subscription-ID>": {\n    "region": "<region>",\n    "name": "<cluster  name>",\n    "resource_group": "<Resource Group Name>"\n  },\n  "<Subscription-ID>": {\n    "region": "<region>",\n    "name": "<cluster  name>",\n    "resource_group": "<Resource Group Name>"\n  },\n  "<Subscription-ID>": {\n    "region": "<region>",\n    "name": "<cluster  name>",\n    "resource_group": "<Resource Group Name>"\n  },\n  "<Subscription-ID>": {\n    "region": "<region>",\n    "name": "<cluster  name>",\n    "resource_group": "<Resource Group Name>"\n  }\n}\n')),"\n",r.createElement(t.ol,{start:"2"},"\n",r.createElement(t.li,null,"Read the data from the input JSON file created at the previous step using the JQ cmd and fetch the list of subscription IDs."),"\n"),"\n",r.createElement(t.pre,null,r.createElement(t.code,{className:"language-sh"},"# Getting the list of subscriptoin IDs\nsubscription_ids=$(echo \"${data}\" | jq -r 'keys | .[]')\n")),"\n",r.createElement(t.ol,{start:"3"},"\n",r.createElement(t.li,null,"Let's loop the list of subscription IDs and update the kube context for every cluster"),"\n"),"\n",r.createElement(t.pre,null,r.createElement(t.code,{className:"language-sh"},'echo "${subscription_ids}" | while read -r subscription_id; do\n    echo "Setting the AZ Context for the Current Sub ID: ${subscription_id}"\n    az account set -s "${subscription_id}" # Setting the Az Context\n\n    name=$(echo ${data} | jq -re \'.\'\\"$subscription_id\\"\'.\'name\'\') # Fetching the Name of the Cluster\n    resource_group=$(echo ${data} | jq -re \'.\'\\"$subscription_id\\"\'.\'resource_group\'\') # Fetching the name of the resource group\n    echo "Getting the aks credentials for the cluster : ${name} in the rg: ${resource_group}"\n    az aks get-credentials -n "${name}" -g "${resource_group}" # Setting the Kube Context\ndone\n')),"\n",r.createElement(t.p,null,"The whole code looks like something below."),"\n",r.createElement(t.pre,null,r.createElement(t.code,{className:"language-sh"},'#!/bin/bash\n\n# Getting the Cluster Info from the local Json\ndata=$(cat <"./data/cluster_info.json" | jq -r)\n\n# Getting the list of subscriptoin IDs\nsubscription_ids=$(echo "${data}" | jq -r \'keys | .[]\')\necho "${subscription_ids}" | while read -r subscription_id; do\n    echo "Setting the AZ Context for the Current Sub ID: ${subscription_id}"\n    az account set -s "${subscription_id}" # Setting the Az Context\n\n    name=$(echo ${data} | jq -re \'.\'\\"$subscription_id\\"\'.\'name\'\') # Fetching the Name of the Cluster\n    resource_group=$(echo ${data} | jq -re \'.\'\\"$subscription_id\\"\'.\'resource_group\'\') # Fetching the name of the resource group\n    echo "Getting the aks credentials for the cluster : ${name} in the rg: ${resource_group}"\n    az aks get-credentials -n "${name}" -g "${resource_group}" # Setting the Kube Context\ndone\n\n')),"\n",r.createElement(t.blockquote,null,"\n",r.createElement(t.p,null,"NOTE: The above solution is applicable only for AKS Clusters."),"\n"))}var c=function(e){void 0===e&&(e={});const{wrapper:t}=Object.assign({},l(),e.components);return t?r.createElement(t,e,r.createElement(a,e)):a(e)},s=n(9357),u=n(1977),i=n(8032);const m=e=>{let{data:t,children:n}=e;const o=(0,i.c)(t.mdx.frontmatter.hero_image);return r.createElement("html",{lang:"en"},r.createElement(u.Z,null,r.createElement("div",{class:"flex items-center justify-center min-h-screen min-w-screen md:w-full px-2 md:px-8"},r.createElement("div",{className:"shrink-0 justify-center drop-shadow-2xl p-8 mt-12 mx-24 w-full md:w-max border-2 border-red-600 bg-gradient-to-br from-gray-100 to-gray-300 rounded-xl prose-headings:text-red-600"},r.createElement("article",{className:"prose lg:prose-l prose-img:rounded-xl prose-a:text-blue-600"},r.createElement("h1",{className:"mb-4 pt-4 text-4xl font-extrabold leading-none tracking-tight text-gray-900 md:text-5xl lg:text-6xl dark:text-white"},t.mdx.frontmatter.title),r.createElement("p",{className:"font-bold text-red-600"},t.mdx.frontmatter.date),r.createElement(i.G,{image:o,alt:t.mdx.frontmatter.hero_image}),r.createElement("p",{className:"text-justify"},n))))))},h=e=>{let{data:t}=e;return r.createElement(s.Z,{title:t.mdx.frontmatter.title})};function d(e){return r.createElement(m,e,r.createElement(c,e))}}}]);
//# sourceMappingURL=component---src-pages-blog-mdx-frontmatter-slug-js-content-file-path-users-yuvaraj-selvarajan-documents-y-code-code-macho-blogs-code-macho-v-6-code-macho-blog-1-index-md-16c8286c8d94608887ba.js.map